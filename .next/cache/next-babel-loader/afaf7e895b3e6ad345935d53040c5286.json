{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_ANIMES } from \"../queries/animeQuery\";\nimport AnimeList from \"./AnimeList\";\nimport SkeletonList from \"./SkeletonList\";\nimport { AnimesProvider } from \"../contexts/animes.context\";\n\nfunction AnimeApp(_ref) {\n  var season = _ref.season;\n  var pagex = 1;\n\n  var _useQuery = useQuery(GET_ANIMES, {\n    variables: {\n      page: pagex,\n      season: season,\n      seasonYear: 2019\n    },\n    onCompleted: function onCompleted(data) {\n      // Fetch more Anime if there next Page\n      if (data.Page.pageInfo.hasNextPage) {\n        pagex += 1;\n        fetchMore({\n          variables: {\n            page: pagex\n          },\n          updateQuery: function updateQuery(prev, _ref2) {\n            var fetchMoreResult = _ref2.fetchMoreResult;\n            return {\n              Page: {\n                __typename: prev.Page.__typename,\n                media: [].concat(_toConsumableArray(prev.Page.media), _toConsumableArray(fetchMoreResult.Page.media)),\n                pageInfo: _objectSpread({}, fetchMoreResult.Page.pageInfo)\n              }\n            };\n          }\n        });\n      }\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  if (loading) return __jsx(SkeletonList, {\n    maxSkeleton: 9\n  });\n  if (error) return __jsx(\"div\", null, \"errror\");\n  return __jsx(\"div\", null, data.Page.media.length > 50 ? __jsx(AnimesProvider, null, __jsx(AnimeList, {\n    animes: data.Page.media\n  })) : __jsx(SkeletonList, {\n    maxSkeleton: 9\n  }));\n}\n\nexport default AnimeApp;","map":{"version":3,"sources":["I:\\AnimeChart\\animechart\\components\\AnimeApp.js"],"names":["React","useQuery","GET_ANIMES","AnimeList","SkeletonList","AnimesProvider","AnimeApp","season","pagex","variables","page","seasonYear","onCompleted","data","Page","pageInfo","hasNextPage","fetchMore","updateQuery","prev","fetchMoreResult","__typename","media","error","loading","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,4BAA/B;;AAIA,SAASC,QAAT,OAA8B;AAAA,MAAVC,MAAU,QAAVA,MAAU;AAG5B,MAAIC,KAAK,GAAG,CAAZ;;AAH4B,kBAIgBP,QAAQ,CAACC,UAAD,EAAa;AAC/DO,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEF,KADG;AAETD,MAAAA,MAAM,EAAEA,MAFC;AAGTI,MAAAA,UAAU,EAAE;AAHH,KADoD;AAM/DC,IAAAA,WAAW,EAAE,qBAAAC,IAAI,EAAI;AACnB;AACA,UAAIA,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,WAAvB,EAAoC;AAClCR,QAAAA,KAAK,IAAI,CAAT;AACAS,QAAAA,SAAS,CAAC;AACRR,UAAAA,SAAS,EAAE;AACTC,YAAAA,IAAI,EAAEF;AADG,WADH;AAIRU,UAAAA,WAAW,EAAE,qBAACC,IAAD,SAA+B;AAAA,gBAAtBC,eAAsB,SAAtBA,eAAsB;AAC1C,mBAAO;AACLN,cAAAA,IAAI,EAAE;AACJO,gBAAAA,UAAU,EAAEF,IAAI,CAACL,IAAL,CAAUO,UADlB;AAEJC,gBAAAA,KAAK,+BAAMH,IAAI,CAACL,IAAL,CAAUQ,KAAhB,sBAA0BF,eAAe,CAACN,IAAhB,CAAqBQ,KAA/C,EAFD;AAGJP,gBAAAA,QAAQ,oBACHK,eAAe,CAACN,IAAhB,CAAqBC,QADlB;AAHJ;AADD,aAAP;AASD;AAdO,SAAD,CAAT;AAgBD;AACF;AA3B8D,GAAb,CAJxB;AAAA,MAIpBF,IAJoB,aAIpBA,IAJoB;AAAA,MAIdU,KAJc,aAIdA,KAJc;AAAA,MAIPC,OAJO,aAIPA,OAJO;AAAA,MAIEP,SAJF,aAIEA,SAJF;;AAkC5B,MAAIO,OAAJ,EAAa,OAAO,MAAC,YAAD;AAAc,IAAA,WAAW,EAAE;AAA3B,IAAP;AACb,MAAID,KAAJ,EAAW,OAAO,4BAAP;AAEX,SACE,mBACGV,IAAI,CAACC,IAAL,CAAUQ,KAAV,CAAgBG,MAAhB,GAAyB,EAAzB,GACG,MAAC,cAAD,QACE,MAAC,SAAD;AAAW,IAAA,MAAM,EAAEZ,IAAI,CAACC,IAAL,CAAUQ;AAA7B,IADF,CADH,GAKC,MAAC,YAAD;AAAc,IAAA,WAAW,EAAE;AAA3B,IANJ,CADF;AAWD;;AAED,eAAehB,QAAf","sourcesContent":["import React from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { GET_ANIMES } from \"../queries/animeQuery\";\r\nimport AnimeList from \"./AnimeList\";\r\nimport SkeletonList from \"./SkeletonList\";\r\nimport { AnimesProvider } from \"../contexts/animes.context\";\r\n\r\n\r\n\r\nfunction AnimeApp({ season }) {\r\n\r\n\r\n  let pagex = 1;\r\n  const { data, error, loading, fetchMore } = useQuery(GET_ANIMES, {\r\n    variables: {\r\n      page: pagex,\r\n      season: season,\r\n      seasonYear: 2019\r\n    },\r\n    onCompleted: data => {\r\n      // Fetch more Anime if there next Page\r\n      if (data.Page.pageInfo.hasNextPage) {\r\n        pagex += 1;\r\n        fetchMore({\r\n          variables: {\r\n            page: pagex\r\n          },\r\n          updateQuery: (prev, { fetchMoreResult }) => {\r\n            return {\r\n              Page: {\r\n                __typename: prev.Page.__typename,\r\n                media: [...prev.Page.media, ...fetchMoreResult.Page.media],\r\n                pageInfo: {\r\n                  ...fetchMoreResult.Page.pageInfo\r\n                }\r\n              }\r\n            };\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  if (loading) return <SkeletonList maxSkeleton={9} />;\r\n  if (error) return <div>errror</div>;\r\n\r\n  return (\r\n    <div >\r\n      {data.Page.media.length > 50 ? (\r\n          <AnimesProvider>\r\n            <AnimeList animes={data.Page.media} />\r\n          </AnimesProvider>\r\n      ) : (\r\n        <SkeletonList maxSkeleton={9} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnimeApp;\r\n"]},"metadata":{},"sourceType":"module"}