{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { memo } from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { FaRegStar, FaRegHeart, FaRegPlayCircle } from \"react-icons/fa\";\nimport useToggler from \"../hooks/useToggle\";\nimport { GridCell, AnimeContainer, AnimeDesc, AnimeGenres, AnimeHeader, Overlay, ListItem, TimeCount, Span, Studio, AnimeRank, AnimeTrailer, Img } from \"../styles/AnimeStyles\";\nimport AddIcon from \"./Icon\";\nimport DropDown from \"./Dropdown\";\n\nfunction Anime(_ref) {\n  var anime = _ref.anime,\n      darkTheme = _ref.darkTheme;\n\n  var _useToggler = useToggler(false),\n      _useToggler2 = _slicedToArray(_useToggler, 2),\n      showDropDown = _useToggler2[0],\n      toggle = _useToggler2[1];\n\n  return __jsx(AnimeContainer, {\n    isDark: darkTheme\n  }, __jsx(GridCell, {\n    top: 1,\n    left: 1\n  }, __jsx(\"a\", {\n    href: anime.siteUrl,\n    target: \"_blanc\"\n  }, __jsx(Img, {\n    src: anime.coverImage.extraLarge\n  }))), __jsx(Overlay, {\n    left: 1,\n    top: 1\n  }, __jsx(\"a\", {\n    href: anime.siteUrl\n  }, anime.title.romaji), __jsx(Studio, null, __jsx(\"a\", {\n    href: anime.formatStudio ? anime.formatStudio.siteUrl : anime.siteUrl\n  }, \" \", anime.formatStudio ? anime.formatStudio.name : ''))), __jsx(AnimeRank, {\n    left: 1,\n    top: 1\n  }, __jsx(\"span\", null, __jsx(FaRegHeart, null), \" #\", anime.formatRank), __jsx(\"span\", {\n    style: {\n      marginTop: \"1px\"\n    }\n  }, __jsx(FaRegStar, {\n    color: \"#eccc68\"\n  }), anime.averageScore / 10)), __jsx(GridCell, {\n    left: 2,\n    top: 1\n  }, __jsx(AnimeHeader, null, __jsx(\"div\", null, __jsx(Span, null, anime.formatEpiosde), __jsx(TimeCount, null, anime.formatTime)), __jsx(AnimeTrailer, null, anime.trailer ? __jsx(Img, {\n    src: anime.trailer.thumbnail\n  }) : \"\", __jsx(FaRegPlayCircle, null))), __jsx(AnimeDesc, null, __jsx(\"p\", null, ReactHtmlParser(anime.description))), __jsx(AnimeGenres, null, __jsx(\"ul\", null, anime.genres.map(function (el, i) {\n    if (i < 2) {\n      return __jsx(ListItem, {\n        color: anime.coverImage.color,\n        key: i\n      }, el);\n    }\n  })))), __jsx(AddIcon, {\n    toggle: toggle,\n    id: anime.id\n  }), showDropDown && __jsx(DropDown, {\n    toggle: toggle,\n    id: anime.id,\n    leaveHandler: toggle\n  }));\n}\n\nexport default memo(Anime);","map":{"version":3,"sources":["I:\\AnimeChart\\animechart\\components\\Anime.js"],"names":["React","memo","ReactHtmlParser","FaRegStar","FaRegHeart","FaRegPlayCircle","useToggler","GridCell","AnimeContainer","AnimeDesc","AnimeGenres","AnimeHeader","Overlay","ListItem","TimeCount","Span","Studio","AnimeRank","AnimeTrailer","Img","AddIcon","DropDown","Anime","anime","darkTheme","showDropDown","toggle","siteUrl","coverImage","extraLarge","title","romaji","formatStudio","name","formatRank","marginTop","averageScore","formatEpiosde","formatTime","trailer","thumbnail","description","genres","map","el","i","color","id"],"mappings":"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","sourcesContent":["import React,{memo} from \"react\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nimport { FaRegStar, FaRegHeart, FaRegPlayCircle } from \"react-icons/fa\";\r\nimport useToggler from \"../hooks/useToggle\";\r\nimport {\r\n  GridCell,\r\n  AnimeContainer,\r\n  AnimeDesc,\r\n  AnimeGenres,\r\n  AnimeHeader,\r\n  Overlay,\r\n  ListItem,\r\n  TimeCount,\r\n  Span,\r\n  Studio,\r\n  AnimeRank,\r\n  AnimeTrailer,\r\n  Img\r\n} from \"../styles/AnimeStyles\";\r\nimport AddIcon from \"./Icon\";\r\nimport DropDown from \"./Dropdown\";\r\n\r\nfunction Anime({ anime,darkTheme }) {\r\n  const [showDropDown, toggle] = useToggler(false);\r\n\r\n  return (\r\n    <AnimeContainer isDark={darkTheme}>\r\n      <GridCell top={1} left={1}>\r\n        <a href={anime.siteUrl} target='_blanc'>\r\n          <Img src={anime.coverImage.extraLarge} />\r\n        </a>\r\n      </GridCell>\r\n      <Overlay left={1} top={1}>\r\n        <a href={anime.siteUrl}>{anime.title.romaji}</a>\r\n        <Studio>\r\n          <a href={anime.formatStudio ? anime.formatStudio.siteUrl : anime.siteUrl}> {anime.formatStudio ? anime.formatStudio.name :''}</a>\r\n        </Studio>\r\n      </Overlay>\r\n      <AnimeRank left={1} top={1}>\r\n        <span>\r\n          <FaRegHeart /> #{anime.formatRank}\r\n        </span>\r\n        <span style={{ marginTop: \"1px\" }}>\r\n          <FaRegStar color='#eccc68' />\r\n\r\n          {anime.averageScore / 10}\r\n        </span>\r\n      </AnimeRank>\r\n\r\n      <GridCell left={2} top={1}>\r\n        <AnimeHeader>\r\n          <div>\r\n            <Span>{anime.formatEpiosde}</Span>\r\n            <TimeCount>{anime.formatTime}</TimeCount>\r\n          </div>\r\n\r\n          <AnimeTrailer>\r\n            {anime.trailer ? <Img src={anime.trailer.thumbnail} /> : \"\"}\r\n            <FaRegPlayCircle />\r\n          </AnimeTrailer>\r\n        </AnimeHeader>\r\n        <AnimeDesc>\r\n          <p>{ReactHtmlParser(anime.description)}</p>\r\n        </AnimeDesc>\r\n        <AnimeGenres>\r\n          <ul>\r\n            {anime.genres.map((el, i) => {\r\n              if (i < 2) {\r\n                return (\r\n                  <ListItem color={anime.coverImage.color} key={i}>\r\n                    {el}\r\n                  </ListItem>\r\n                );\r\n              }\r\n            })}\r\n          </ul>\r\n        </AnimeGenres>\r\n      </GridCell>\r\n      <AddIcon toggle={toggle} id={anime.id} />\r\n\r\n      {showDropDown && (\r\n        <DropDown\r\n          toggle={toggle}\r\n          id={anime.id}\r\n          leaveHandler={toggle}\r\n        />\r\n      )}\r\n    </AnimeContainer>\r\n  );\r\n}\r\n\r\nexport default memo(Anime);\r\n"]},"metadata":{},"sourceType":"module"}